{"meta":{"title":"宁宁的大图书馆","subtitle":"","description":"","author":"Ayachi Nene","url":"https://kahuuchino.github.io","root":"/"},"pages":[{"title":"朋友","date":"2023-05-08T12:41:30.890Z","updated":"2023-05-08T12:41:30.890Z","comments":true,"path":"PY.html","permalink":"https://kahuuchino.github.io/PY.html","excerpt":"","text":"谢谢，克拉拉会记得你的。 友情链接 添加友链 名称：田所浩二介绍：有在健身，喜欢红茶链接：https://n114514.com/LOGO：https://1919810.jpg 需要更新头像或者链接请email到&#107;&#97;&#104;&#117;&#117;&#99;&#104;&#x69;&#x6e;&#x6f;&#x40;&#113;&#x71;&#x2e;&#99;&#111;&#x6d;，懒狗是不会去做评论系统的"},{"title":"关于","date":"2023-05-08T12:36:23.581Z","updated":"2023-05-08T12:36:23.581Z","comments":true,"path":"about.html","permalink":"https://kahuuchino.github.io/about.html","excerpt":"","text":"介绍计算机体系结构方向，主攻FPGA应用，软件能力为0 博客大事记 2023&#x2F;5&#x2F;8 懒狗终于把这玩意弄完了"}],"posts":[{"title":"ssh登录显示自定义信息","slug":"ssh-login-welcome","date":"2023-05-15T12:12:40.000Z","updated":"2023-05-15T12:41:25.219Z","comments":true,"path":"2023/05/15/ssh-login-welcome/","link":"","permalink":"https://kahuuchino.github.io/2023/05/15/ssh-login-welcome/","excerpt":"","text":"ssh登录显示自定义信息属于是灵光一闪了，想让ssh登录时显示一些自定义的内容 登录时打印的信息有三个文件可以控制： &#x2F;etc&#x2F;ssh&#x2F;sshd_config (登录前) &#x2F;etc&#x2F;motd (登录后) ~&#x2F;.bashrc (环境变量) &#x2F;etc&#x2F;ssh&#x2F;sshd_configbanner指的是横幅，在这里表示服务器在接收到ssh连接请求时向用户显示的信息，也就是在登录前就会对信息进行打印 首先需要开启ssh里的banner支持 1sudo vim /etc/ssh/sshd_config 大概107行会找到这么一段内容 12# no default banner path# Banner None 取消Banner前的注释，并把None改为一个路径，这里以改为/etc/mybanner为例 12# no default banner pathBanner /etc/mybanner 之后新建对应的mybanner文件，写入对应的信息 1sudo vim /etc/mybanner 12345678910111213141516$ cat /etc/mybanner------------------------------------------------------------------------------ 社会主义核心价值观: 富强、民主、文明、和谐 自由、平等、公正、法治 爱国、敬业、诚信、友善------------------------------------------------------------------------------ 保存后重启ssh服务 1sudo systemctl restart sshd 这时通过ssh连接就能看到对应的信息了 123456789101112131415161718# kahuuchino @ ATRI in ~ [19:53:49]$ ssh kahuuchino@ip_address------------------------------------------------------------------------------ 社会主义核心价值观: 富强、民主、文明、和谐 自由、平等、公正、法治 爱国、敬业、诚信、友善------------------------------------------------------------------------------kahuuchino@ip_address&#x27;s password: &#x2F;etc&#x2F;motd这个文件的信息会在确认密码正确后打印 1sudo vim /etc/motd/ 123456789101112131415161718192021222324252627# kahuuchino @ ATRI in ~ [20:21:49]$ cat /etc/motd------------------------------------------------------------------------------ 八荣八耻要牢记 以热爱祖国为荣，以危害祖国为耻。 以服务人民为荣，以背离人民为耻。 以崇尚科学为荣，以愚昧无知为耻。 以辛勤劳动为荣，以好逸恶劳为耻。 以团结互助为荣，以损人利己为耻。 以诚实守信为荣，以见利忘义为耻。 以遵纪守法为荣，以违法乱纪为耻。 以艰苦奋斗为荣，以骄奢淫逸为耻。------------------------------------------------------------------------------ 显示效果如下 123456789101112131415161718192021222324252627282930kahuuchino@ip_address&#x27;s password:------------------------------------------------------------------------------ 八荣八耻要牢记 以热爱祖国为荣，以危害祖国为耻。 以服务人民为荣，以背离人民为耻。 以崇尚科学为荣，以愚昧无知为耻。 以辛勤劳动为荣，以好逸恶劳为耻。 以团结互助为荣，以损人利己为耻。 以诚实守信为荣，以见利忘义为耻。 以遵纪守法为荣，以违法乱纪为耻。 以艰苦奋斗为荣，以骄奢淫逸为耻。------------------------------------------------------------------------------Last login: Mon May 15 17:18:37 2023 from ip_address# kahuuchino @ ATRI in ~ [19:53:49] ~&#x2F;.bashrc这个文件其实算是一个命令脚本，每次无论以什么方式登录都会把这个文件里的命令全部执行一遍，因此环境变量可以以export命令的形式写在这个文件里我的目标是登录时打印电脑信息，因此需要执行一次neofetch这个小工具来打印，因此在~/.bashrc内增加以下内容 123if [[ -n $SSH_CONNECTION ]] ; then echo &quot;\\n&quot; &amp;&amp; neofetchfi 通过$SSH_CONNECTION判断当前执行来源为ssh登录还是用户手动执行source ~/.bashrc，之后再执行neofetch，echo &quot;\\n&quot;是我为了美观多打印的空行，执行效果如下 1234567891011121314151617181920212223242526Last login: Mon May 15 17:18:37 2023 from ip_address -` kahuuchino@ATRI .o+` --------------- `ooo/ OS: Arch Linux x86_64 `+oooo: Host: MS-7971 1.0 `+oooooo: Kernel: 6.3.1-arch2-1 -+oooooo+: Uptime: 21 hours `/:-:++oooo+: Packages: 1287 (pacman) `/++++/+++++++: Shell: zsh 5.9 `/++++++++++++++: Resolution: 2560x1440 `/+++ooooooooooooo/` Terminal: /dev/pts/2 ./ooosssso++osssssso+` CPU: Genuine Intel 0000 (8) @ 3.500GHz .oossssso-````/ossssss+` GPU: Intel HD Graphics 630 -osssssso. :ssssssso. Memory: 11229MiB / 15905MiB :osssssss/ osssso+++. /ossssssss/ +ssssooo/- `/ossssso+/:- -:/+osssso+- `+sso+:-` `.-/+oso: `++:. `-/+/ .` `/# kahuuchino @ ATRI in ~ [19:53:49] 完整效果展示","categories":[],"tags":[{"name":"Linux","slug":"Linux","permalink":"https://kahuuchino.github.io/tags/Linux/"}]},{"title":"reveal.js配置小结","slug":"reveal-js-configuration","date":"2023-05-08T13:41:39.000Z","updated":"2023-05-08T14:19:58.692Z","comments":true,"path":"2023/05/08/reveal-js-configuration/","link":"","permalink":"https://kahuuchino.github.io/2023/05/08/reveal-js-configuration/","excerpt":"","text":"Reveal.js 配置小结最近组会老是要拷PPT，我自己的U盘不见了，无奈，只能每次都用QQ发给负责组会的同学，一来二去十分麻烦。在跟着jyy老师的操作系统课程学习时注意到老师的PPT是可以运行在浏览器环境里的，瞬间被种草并直接开始安装配置研究。 安装先简单过一下环境，Ubuntu22.04，没了 安装流程很简单：reveal.js本身只是一个2M不到的HTML项目，只需要使用Node.js的服务将其运行起来就可以了。 NVMNVM是一个Bash脚本，可以方便地控制安装的Node.js版本，还可以同时安装多个Node.js版本。Ubuntu软件源中默认的Node.js是9.6版本，无法运行reveal.js，因此通过NVM安装新版本的Node.js。 1curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.35.3/install.sh | bash 不要使用 sudo 运行，因为这会为 root 用户启用nvm。这条指令会把nvm保存到~&#x2F;.nvm 接着添加环境变量，在~&#x2F;.bashrc末尾添加如下内容： 123export NVM_DIR=&quot;$HOME/.nvm&quot;[ -s &quot;$NVM_DIR/nvm.sh&quot; ] &amp;&amp; \\. &quot;$NVM_DIR/nvm.sh&quot; # This loads nvm[ -s &quot;$NVM_DIR/bash_completion&quot; ] &amp;&amp; \\. &quot;$NVM_DIR/bash_completion&quot; # This loads nvm bash_completion 如果使用的是oh-my-zsh，则配置文件为~&#x2F;.zshrc。之后更新环境变量 1source ~/.bashrc 现在nvm应该就是可用状态了，使用如下命令检查： 1nvm --version 正常情况下会输出版本号 接下来安装最新版本的Node.js 1nvm install node 也可以用如下命令安装长期支持版和指定版本 12nvm install --lts # long time servicenvm install 10.9.0 # 10.9.0 之后执行nvm list检查安装结果如果结果中出现如下内容 1default -&gt; 12.13.0 (-&gt; N/A) 这代表默认的Node.js版本未指定，可以通过如下命令指定 1nvm alias default 12.13.0 这样就安装好了，可以用npm完成包管理过程了。 reveal.js很简单，只需要将项目克隆到本地即可 1234git clone https://github.com/hakimel/reveal.js.gitcd reveal.jsnpm installnpm start Node.js会默认把网页挂在localhost:8000，如果需要切换端口，只需要指定port参数即可 1npm start -- --port=12306 这就可以通过localhost:12306或127.0.0.1:12306访问幻灯片了 非本机访问这个问题折腾了我一个晚上我的reveal.js运行在一台有稳定局域网IP的机子上，我想着只要访问这台机子的8000端口就可以了，没想到无论怎么尝试都是拒绝访问。定位了一晚上，从vue框架中猜测是host域名的问题，最后锁定到这么一个文件 1234567891011--- gulpfile_old.js 2023-05-08 22:10:10.374744332 +0800+++ gulpfile.js 2023-05-04 22:41:31.108223722 +0800@@ -24,7 +24,7 @@ const root = yargs.argv.root || &#x27;.&#x27; const port = yargs.argv.port || 8000-const host = yargs.argv.host || &#x27;localhost&#x27;+const host = yargs.argv.host || &#x27;0.0.0.0&#x27; const banner = `/*! * reveal.js $&#123;pkg.version&#125; 按照vue相关的博客所说，这个字段定义的地址会导致外部访问时寻址失败，我不做前端真的搞不懂是什么原因，但这么改了以后确实能通过ip+端口的方式访问了，就这样吧。 下一步下次组会就用这玩意放PPT了，到时再写一下这玩意怎么用。","categories":[],"tags":[{"name":"presentation","slug":"presentation","permalink":"https://kahuuchino.github.io/tags/presentation/"},{"name":"reveal.js","slug":"reveal-js","permalink":"https://kahuuchino.github.io/tags/reveal-js/"}]},{"title":"Linux kernel内核编译记录","slug":"Linux-kernel-compile","date":"2023-05-08T09:08:02.000Z","updated":"2023-05-08T13:40:37.600Z","comments":true,"path":"2023/05/08/Linux-kernel-compile/","link":"","permalink":"https://kahuuchino.github.io/2023/05/08/Linux-kernel-compile/","excerpt":"","text":"linux 内核编译版本4.15.0， ubuntu16.04默认内核为4.15.0-38-generic genheaders.c头文件引用出错问题描述12In file included from scripts/selinux/genheaders/genheaders.c:19:./security/selinux/include/classmap.h:248:2: error: #error New address family defined, please update secclass_map. 解决方法打开.h文件，添加头文件#include &lt;linux&#x2F;socket.h&gt;打开.c文件，注释#include&lt;sys&#x2F;socket.h&gt; pager_preexec参数调用有误问题描述123pager.c: In function ‘pager_preexec’:pager.c:36:12: error: passing argument 2 to restrict-qualified parameter aliases with argument 4 [-Werror=restrict] select(1, &amp;in, NULL, &amp;in, NULL); 解决方法寻找高版本文件，更新对应函数，这个被定为bug 12345678910111213141516171819static void pager_preexec(void)&#123; /* * Work around bug in &quot;less&quot; by not starting it until we * have real input */ fd_set in; fd_set exception; FD_ZERO(&amp;in); FD_ZERO(&amp;exception); FD_SET(0, &amp;in); FD_SET(0, &amp;exception); select(1, &amp;in, NULL, &amp;exception, NULL); setenv(&quot;LESS&quot;, &quot;FRSX&quot;, 0);&#125; elf_getshnum重定义问题描述1orc_dump.c:106:9: error: ‘elf_getshnum’ is deprecated [-Werror=deprecated-declarations] 解决方法又是一个在高版本被修复的bug https://bugzilla.kernel.org/show_bug.cgi?id=197847 1234567891011--- tools/objtool/Makefile 2017-11-11 14:55:08.243236243 +0000+++ tools/objtool/Makefile.new 2017-11-11 14:56:52.322443760 +0000@@ -29,7 +29,7 @@ LDFLAGS += -lelf $(LIBSUBCMD) # Allow old libelf to be used:- elfshdr := $(shell echo &#x27;\\#include &lt;libelf.h&gt;&#x27; | $(CC) $(CFLAGS) -x c -E - | grep elf_getshdr)+ elfshdr := $(shell echo &#x27;#include &lt;libelf.h&gt;&#x27; | $(CC) $(CFLAGS) -x c -E - | grep elf_getshdr) CFLAGS += $(if $(elfshdr),,-DLIBELF_USE_DEPRECATED) AWK = awk 123456789101112--- tools/build/Build.include 2017-11-11 14:57:12.862287367 +0000+++ tools/build/Build.include.new 2017-11-11 14:56:37.232558659 +0000@@ -62,8 +62,8 @@ $(fixdep) $(depfile) $@ &#x27;$(make-cmd)&#x27; &gt; $(dot-target).tmp; \\ rm -f $(depfile); \\ mv -f $(dot-target).tmp $(dot-target).cmd, \\- printf &#x27;# cannot find fixdep (%s)\\n&#x27; $(fixdep) &gt; $(dot-target).cmd; \\- printf &#x27;# using basic dep data\\n\\n&#x27; &gt;&gt; $(dot-target).cmd; \\+ printf &#x27;\\# cannot find fixdep (%s)\\n&#x27; $(fixdep) &gt; $(dot-target).cmd; \\+ printf &#x27;\\# using basic dep data\\n\\n&#x27; &gt;&gt; $(dot-target).cmd; \\ cat $(depfile) &gt;&gt; $(dot-target).cmd; \\ printf &#x27;\\n%s\\n&#x27; &#x27;cmd_$@ := $(make-cmd)&#x27; &gt;&gt; $(dot-target).cmd) openssl宏重定义问题描述1scripts/sign-file.c:89:9: warning: ‘ERR_get_error_line’ is deprecated: Since OpenSSL 3.0 [-Wdeprecated-declarations] 解决方法这个api在openssl3.0已被弃用，但社区懒得支持，在sign-file.c中添加编译器指令忽略重定义问题 123456/* * OpenSSL 3.0 deprecates the OpenSSL&#x27;s ENGINE API. * * Remove this if/when that API is no longer used */#pragma GCC diagnostic ignored &quot;-Wdeprecated-declarations&quot; objtool符号表未命中问题描述1arch/x86/entry/.tmp_thunk_64.o: warning: objtool: missing symbol table 解决方法更新后这玩意可能会空，因此把错误处理代码替换为return 0 https://www.spinics.net/lists/kernel/msg3797871.html QEMU启动时提示处理器不支持LA57特性https://lkml.kernel.org/lkml/20190225195122.930447522@linuxfoundation.org/4.20的patch修复了这个问题，但是直接按照对应patch更新代码会导致另一个文件编译出错，因此需要下载此patch后更新的4.20.13版本，使用对应的cpuid.c文件进行修改 后续QEMU始终无法启动4.15内核，最后改为使用22.04使用的5.19内核，编译一遍过我究竟在研究什么东西…","categories":[],"tags":[{"name":"Linux","slug":"Linux","permalink":"https://kahuuchino.github.io/tags/Linux/"}]}],"categories":[],"tags":[{"name":"Linux","slug":"Linux","permalink":"https://kahuuchino.github.io/tags/Linux/"},{"name":"presentation","slug":"presentation","permalink":"https://kahuuchino.github.io/tags/presentation/"},{"name":"reveal.js","slug":"reveal-js","permalink":"https://kahuuchino.github.io/tags/reveal-js/"}]}